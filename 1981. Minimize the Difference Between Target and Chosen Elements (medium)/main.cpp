// #include <bits/stdc++.h>

#include <algorithm>
#include <bitset>
#include <cassert>
#include <chrono>
#include <cmath>
#include <deque>
#include <fstream>
#include <functional>
#include <iomanip>
#include <iostream>
#include <iterator>
#include <limits>
#include <list>
#include <map>
#include <memory>
#include <numeric>
#include <optional>
#include <random>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <unordered_map>
#include <unordered_set>
#include <variant>
#include <vector>

using namespace std::literals;

using ll = long long;
using ii [[maybe_unused]] = std::pair<int, int>;
using vi [[maybe_unused]] = std::vector<int>;
using vl [[maybe_unused]] = std::vector<ll>;
using vvi [[maybe_unused]] = std::vector<vi>;
using vii [[maybe_unused]] = std::vector<ii>;
using vb [[maybe_unused]] = std::vector<bool>;
using vd [[maybe_unused]] = std::vector<double>;
using vs [[maybe_unused]] = std::vector<std::string>;

#define FOR(_i, _a, _b) for (int _i = (_a); _i <= (_b); ++(_i))
#define FORD(_i, _a, _b) for (int _i = (_a); _i >= (_b); --(_i))
#define RNG(_l) (_l).begin(), (_l).end()
#define SORT(_l) std::sort((_l).begin(), (_l).end())
#define CI(_v) static_cast<int>(_v)
#define CL(_v) static_cast<ll>(_v)
#define CD(_v) static_cast<double>(_v)
#define SZ(_v) static_cast<int>((_v).size())
#define F first
#define S second

constexpr int MAX_X = 70;

class Solution {
public:
  int minimizeTheDifference(const vvi& mat, const int target) {
    const auto n = SZ(mat), m = SZ(mat[0]);
    vvi vis(n, vi(n * m * MAX_X + 1, 0));
    auto min_res = INT_MAX;
    const std::function<void(int, int)> rec = [&](const int i, const int psum) {
      if (i == n) {
        min_res = std::min(min_res, std::abs(psum - target));
        return;
      }
      if (vis[i][psum] || psum - target >= min_res)
        return;
      vis[i][psum] = 1;
      FOR(j, 0, m-1) {
        rec(i + 1, psum + mat[i][j]);
      }
    };
    rec(0, 0);
    return min_res;
  }
};

[[maybe_unused]] void TestSolution() {
  {
    const auto start_t = std::chrono::high_resolution_clock::now();

    const vvi mat{{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
    const auto a_out = Solution().minimizeTheDifference(mat, 13);
    assert(a_out == 0);

    const auto end_t = std::chrono::high_resolution_clock::now();
    const auto total_t = std::chrono::duration_cast<std::chrono::milliseconds>(end_t - start_t).count();
    std::cerr << total_t << " ms"sv << std::endl;
  }
  {
    const auto start_t = std::chrono::high_resolution_clock::now();

    const vvi mat{{1}, {2}, {3}};
    const auto a_out = Solution().minimizeTheDifference(mat, 100);
    assert(a_out == 94);

    const auto end_t = std::chrono::high_resolution_clock::now();
    const auto total_t = std::chrono::duration_cast<std::chrono::milliseconds>(end_t - start_t).count();
    std::cerr << total_t << " ms"sv << std::endl;
  }
  {
    const auto start_t = std::chrono::high_resolution_clock::now();

    const vvi mat{{1, 2, 9, 8, 7}};
    const auto a_out = Solution().minimizeTheDifference(mat, 6);
    assert(a_out == 1);

    const auto end_t = std::chrono::high_resolution_clock::now();
    const auto total_t = std::chrono::duration_cast<std::chrono::milliseconds>(end_t - start_t).count();
    std::cerr << total_t << " ms"sv << std::endl;
  }
  {
    const auto start_t = std::chrono::high_resolution_clock::now();

    const vvi mat{
        {70, 1, 1, 1, 1, 1, 70, 70, 70, 70, 1, 1, 70, 1, 70, 1, 1, 1, 1, 70, 70, 1, 10, 1, 1, 70, 1, 1, 70, 1, 1, 1, 1,
         1, 1, 1, 70, 70, 1, 70, 70, 1, 70, 70, 70, 70, 70, 1, 70, 70, 70, 70, 70, 1, 1, 1, 1, 70, 70, 70, 70, 70, 70,
         70, 70, 1, 1, 70, 1, 1},
        {70, 70, 70, 1, 70, 1, 10, 70, 70, 70, 70, 1, 1, 1, 1, 70, 1, 70, 70, 1, 70, 70, 70, 1, 70, 70, 1, 1, 1, 70, 70,
         70, 70, 1, 70, 70, 1, 70, 70, 70, 70, 70, 1, 1, 1, 1, 70, 70, 1, 1, 70, 70, 1, 70, 70, 1, 70, 70, 70, 70, 1,
         70, 1, 70, 70, 70, 1, 70, 70, 70},
        {1, 1, 1, 70, 1, 1, 70, 1, 70, 70, 70, 70, 70, 70, 70, 1, 70, 1, 70, 70, 70, 70, 70, 1, 1, 70, 70, 70, 70, 70,
         1, 1, 70, 1, 1, 70, 70, 70, 1, 1, 1, 70, 70, 70, 70, 70, 70, 70, 70, 1, 70, 70, 10, 1, 70, 70, 1, 1, 70, 70,
         70, 70, 70, 70, 70, 70, 1, 1, 70, 70},
        {70, 70, 70, 70, 70, 70, 1, 1, 70, 1, 1, 1, 70, 1, 70, 70, 1, 70, 70, 70, 1, 1, 1, 70, 1, 1, 70, 70, 1, 1, 1,
         70, 70, 1, 1, 1, 70, 1, 1, 70, 70, 70, 70, 70, 1, 1, 1, 70, 1, 1, 1, 1, 1, 1, 70, 10, 1, 70, 70, 1, 1, 70, 1,
         1, 70, 1, 1, 70, 70, 1},
        {70, 70, 1, 70, 70, 70, 10, 70, 1, 70, 70, 1, 70, 1, 70, 70, 70, 70, 70, 1, 70, 1, 70, 1, 70, 1, 70, 1, 1, 70,
         70, 1, 1, 70, 1, 70, 1, 1, 1, 1, 1, 1, 70, 70, 70, 1, 70, 1, 70, 1, 70, 70, 1, 1, 70, 70, 1, 1, 1, 70, 70, 1,
         1, 1, 1, 70, 70, 70, 1, 1},
        {1, 70, 1, 1, 70, 70, 70, 1, 70, 70, 70, 1, 1, 70, 1, 70, 1, 70, 1, 70, 70, 1, 1, 70, 1, 1, 1, 1, 70, 70, 10,
         70, 70, 1, 70, 1, 1, 70, 70, 70, 1, 70, 70, 70, 1, 70, 70, 70, 1, 70, 1, 1, 70, 70, 70, 1, 1, 1, 70, 1, 1, 70,
         1, 70, 70, 1, 1, 1, 1, 70},
        {1, 70, 70, 1, 70, 1, 70, 1, 1, 70, 1, 70, 70, 70, 1, 1, 70, 1, 70, 70, 70, 1, 1, 70, 1, 1, 70, 1, 70, 70, 10,
         70, 1, 70, 1, 70, 1, 70, 1, 70, 70, 1, 70, 70, 70, 70, 1, 70, 1, 70, 70, 1, 70, 1, 1, 1, 1, 1, 1, 70, 1, 1, 70,
         70, 70, 70, 1, 70, 1, 1},
        {70, 70, 1, 70, 1, 70, 1, 70, 70, 70, 70, 1, 70, 70, 1, 1, 70, 70, 70, 1, 70, 70, 70, 1, 70, 1, 70, 70, 70, 70,
         70, 1, 1, 1, 1, 70, 1, 70, 70, 1, 70, 1, 70, 1, 70, 1, 70, 1, 70, 10, 1, 1, 1, 70, 1, 70, 70, 70, 70, 70, 1,
         70, 70, 70, 1, 1, 70, 1, 70, 1},
        {1, 1, 70, 1, 70, 70, 1, 1, 70, 1, 1, 70, 1, 70, 1, 70, 70, 70, 1, 70, 1, 1, 1, 70, 70, 1, 1, 70, 1, 70, 1, 1,
         70, 70, 1, 70, 70, 1, 10, 70, 1, 70, 1, 70, 70, 1, 70, 1, 70, 1, 1, 1, 1, 70, 70, 1, 1, 1, 1, 1, 70, 1, 1, 70,
         1, 70, 70, 70, 1, 70},
        {70, 70, 1, 70, 1, 70, 70, 1, 70, 70, 1, 1, 1, 1, 70, 70, 1, 70, 1, 70, 70, 70, 70, 1, 70, 1, 1, 1, 1, 70, 1, 1,
         1, 70, 1, 70, 70, 1, 70, 1, 1, 1, 70, 1, 10, 1, 70, 70, 70, 1, 70, 70, 1, 70, 1, 70, 70, 1, 1, 70, 1, 70, 70,
         70, 70, 1, 70, 70, 70, 1},
        {1, 70, 70, 1, 70, 70, 70, 1, 70, 1, 70, 1, 1, 70, 1, 1, 70, 1, 1, 70, 70, 70, 1, 70, 70, 1, 70, 1, 1, 1, 1, 70,
         1, 1, 70, 1, 70, 70, 70, 1, 70, 70, 10, 70, 70, 70, 1, 70, 1, 70, 1, 70, 70, 1, 1, 70, 1, 1, 70, 1, 70, 1, 1,
         70, 1, 70, 70, 1, 1, 1},
        {1, 70, 1, 70, 1, 70, 1, 1, 10, 1, 1, 70, 70, 1, 70, 1, 1, 70, 70, 70, 70, 70, 70, 1, 70, 1, 1, 70, 70, 1, 70,
         1, 1, 70, 70, 1, 1, 70, 70, 1, 70, 70, 70, 70, 1, 1, 70, 1, 1, 70, 1, 1, 1, 70, 70, 70, 70, 1, 70, 70, 70, 1,
         70, 1, 1, 1, 70, 1, 1, 1},
        {70, 70, 70, 1, 1, 1, 70, 1, 70, 1, 1, 70, 70, 1, 70, 70, 70, 1, 1, 1, 70, 70, 70, 1, 70, 70, 1, 1, 70, 70, 1,
         1, 70, 70, 70, 70, 70, 1, 1, 1, 70, 1, 1, 1, 1, 70, 70, 70, 70, 1, 1, 70, 1, 70, 70, 1, 1, 70, 70, 1, 70, 70,
         70, 1, 1, 70, 10, 1, 70, 1},
        {1, 1, 70, 70, 70, 70, 70, 1, 70, 70, 70, 1, 1, 1, 1, 70, 70, 70, 1, 1, 1, 70, 70, 1, 70, 1, 70, 1, 70, 70, 1,
         70, 70, 1, 1, 1, 1, 1, 70, 70, 70, 70, 70, 1, 70, 70, 1, 70, 70, 1, 1, 1, 70, 1, 1, 1, 1, 10, 70, 70, 70, 1, 1,
         1, 70, 1, 70, 1, 70, 70},
        {70, 70, 1, 1, 70, 70, 1, 1, 1, 70, 70, 1, 70, 70, 70, 1, 1, 70, 70, 1, 70, 70, 70, 70, 70, 1, 1, 70, 1, 1, 1,
         70, 70, 1, 1, 70, 70, 1, 70, 1, 70, 70, 70, 70, 70, 1, 1, 1, 1, 1, 1, 1, 70, 1, 1, 1, 1, 70, 70, 70, 1, 1, 70,
         70, 1, 10, 1, 1, 1, 1},
        {70, 70, 70, 70, 70, 1, 1, 70, 1, 70, 1, 70, 70, 1, 70, 70, 70, 1, 1, 1, 1, 1, 1, 1, 70, 1, 70, 1, 70, 70, 70,
         70, 1, 1, 1, 70, 70, 1, 70, 1, 1, 70, 1, 1, 1, 1, 70, 70, 70, 1, 1, 1, 70, 1, 1, 10, 1, 70, 70, 70, 70, 1, 1,
         1, 1, 1, 1, 70, 1, 70},
        {1, 1, 70, 1, 1, 1, 1, 70, 70, 70, 1, 1, 1, 1, 70, 70, 1, 70, 1, 70, 1, 70, 70, 70, 1, 70, 70, 1, 70, 1, 1, 1,
         70, 70, 70, 1, 1, 1, 1, 1, 1, 70, 70, 70, 70, 10, 1, 1, 1, 70, 1, 1, 1, 1, 70, 1, 70, 1, 1, 70, 70, 70, 70, 70,
         70, 70, 70, 1, 1, 1},
        {1, 70, 1, 1, 1, 1, 1, 1, 70, 1, 1, 1, 1, 1, 70, 1, 1, 70, 70, 1, 70, 1, 70, 1, 1, 1, 70, 1, 1, 70, 1, 70, 70,
         70, 1, 1, 1, 1, 1, 1, 70, 70, 70, 1, 1, 1, 70, 70, 1, 1, 1, 70, 1, 1, 1, 1, 1, 70, 1, 70, 70, 70, 1, 1, 10, 1,
         1, 70, 1, 70},
        {1, 1, 70, 70, 1, 1, 1, 1, 1, 1, 70, 70, 70, 1, 1, 10, 70, 1, 1, 1, 1, 70, 70, 70, 1, 70, 70, 70, 70, 70, 1, 1,
         1, 1, 1, 1, 70, 1, 1, 70, 1, 70, 70, 1, 70, 1, 70, 1, 1, 70, 70, 70, 1, 70, 70, 1, 70, 70, 70, 1, 1, 70, 70,
         70, 1, 70, 1, 1, 70, 70},
        {70, 1, 1, 1, 1, 1, 70, 1, 1, 70, 70, 1, 1, 70, 1, 70, 1, 1, 1, 1, 1, 1, 70, 1, 70, 70, 1, 70, 1, 70, 1, 70, 70,
         70, 1, 1, 70, 70, 1, 70, 70, 1, 70, 10, 1, 70, 1, 1, 1, 1, 70, 70, 70, 1, 70, 70, 1, 70, 1, 70, 1, 70, 70, 1,
         70, 1, 70, 1, 70, 70},
        {1, 1, 1, 1, 1, 70, 70, 70, 1, 1, 70, 70, 70, 70, 70, 1, 70, 70, 70, 1, 1, 1, 1, 1, 70, 70, 70, 70, 70, 70, 1,
         70, 10, 70, 70, 1, 70, 1, 70, 70, 70, 1, 70, 1, 70, 70, 1, 70, 70, 70, 1, 70, 1, 1, 70, 70, 1, 1, 70, 70, 70,
         70, 70, 1, 70, 70, 1, 1, 1, 70},
        {70, 70, 1, 70, 70, 70, 70, 1, 70, 1, 1, 70, 1, 70, 1, 70, 70, 1, 1, 70, 1, 1, 1, 1, 70, 1, 70, 1, 70, 1, 70,
         70, 70, 1, 70, 70, 70, 1, 1, 1, 1, 1, 70, 1, 1, 70, 1, 1, 70, 70, 1, 1, 1, 70, 70, 10, 70, 70, 70, 70, 1, 1,
         70, 70, 1, 1, 70, 1, 1, 70},
        {1, 1, 70, 70, 70, 70, 1, 1, 1, 70, 70, 1, 70, 70, 70, 1, 1, 70, 1, 1, 1, 1, 1, 1, 70, 70, 1, 1, 1, 1, 1, 70, 1,
         1, 70, 1, 70, 70, 1, 70, 70, 70, 1, 1, 1, 70, 1, 10, 1, 1, 70, 70, 70, 1, 70, 70, 70, 70, 1, 70, 70, 70, 1, 1,
         70, 1, 1, 1, 1, 1},
        {1, 1, 1, 1, 1, 70, 70, 70, 70, 70, 1, 70, 1, 70, 1, 70, 70, 1, 1, 70, 70, 70, 70, 1, 70, 1, 1, 1, 70, 70, 1,
         70, 1, 70, 70, 1, 70, 1, 1, 70, 1, 1, 70, 1, 1, 1, 1, 70, 1, 1, 70, 1, 70, 1, 70, 1, 1, 70, 10, 70, 70, 70, 1,
         70, 70, 70, 70, 70, 1, 70},
        {70, 1, 70, 1, 1, 70, 70, 70, 70, 1, 1, 1, 1, 1, 1, 70, 70, 1, 1, 70, 70, 1, 70, 1, 1, 1, 70, 1, 1, 70, 70, 70,
         1, 1, 1, 1, 1, 1, 10, 1, 70, 1, 1, 1, 70, 70, 70, 1, 70, 70, 70, 1, 1, 1, 1, 70, 1, 1, 1, 1, 1, 70, 1, 70, 1,
         70, 70, 70, 70, 70},
        {1, 1, 1, 70, 70, 70, 1, 10, 70, 1, 70, 70, 1, 1, 1, 70, 70, 1, 70, 1, 70, 70, 70, 1, 70, 1, 1, 70, 1, 70, 1,
         70, 70, 1, 70, 1, 70, 1, 1, 1, 1, 70, 1, 1, 1, 1, 1, 1, 1, 1, 70, 70, 1, 70, 70, 70, 1, 70, 70, 70, 70, 1, 1,
         1, 1, 70, 70, 1, 70, 1},
        {1, 70, 70, 1, 70, 10, 1, 1, 70, 70, 70, 70, 1, 70, 70, 1, 1, 70, 1, 70, 70, 70, 70, 70, 1, 1, 70, 1, 70, 1, 70,
         70, 70, 1, 1, 1, 1, 70, 70, 70, 1, 1, 1, 1, 70, 70, 1, 1, 70, 70, 1, 70, 1, 70, 70, 70, 70, 1, 1, 1, 1, 70, 1,
         70, 1, 70, 70, 1, 70, 70},
        {1, 1, 1, 70, 1, 70, 70, 1, 70, 1, 1, 70, 70, 70, 70, 70, 70, 70, 1, 1, 70, 70, 1, 70, 1, 1, 70, 70, 70, 1, 70,
         70, 70, 70, 70, 70, 10, 70, 1, 1, 1, 70, 70, 1, 1, 1, 70, 70, 1, 70, 1, 1, 1, 1, 1, 70, 70, 1, 1, 1, 1, 70, 1,
         1, 70, 70, 1, 70, 1, 1},
        {1, 70, 1, 1, 1, 70, 70, 70, 70, 1, 1, 70, 1, 70, 70, 70, 70, 1, 1, 1, 70, 70, 1, 1, 1, 70, 70, 1, 10, 1, 1, 70,
         1, 70, 1, 1, 1, 1, 70, 70, 70, 70, 70, 70, 70, 70, 1, 1, 1, 70, 70, 70, 1, 1, 70, 1, 1, 70, 70, 1, 70, 1, 70,
         70, 1, 1, 70, 1, 70, 70},
        {70, 1, 70, 70, 1, 1, 70, 1, 1, 70, 70, 70, 1, 70, 70, 1, 1, 70, 1, 1, 1, 70, 1, 70, 1, 70, 70, 1, 1, 1, 1, 1,
         70, 70, 1, 70, 70, 70, 1, 70, 1, 70, 10, 70, 70, 1, 70, 1, 1, 1, 1, 1, 1, 1, 1, 70, 1, 1, 70, 70, 70, 1, 70,
         70, 70, 1, 70, 70, 1, 1},
        {70, 1, 1, 70, 1, 70, 70, 70, 1, 1, 70, 70, 1, 70, 1, 70, 70, 1, 1, 70, 70, 70, 70, 1, 1, 70, 1, 1, 70, 70, 1,
         70, 1, 70, 1, 1, 70, 1, 70, 70, 70, 1, 1, 70, 70, 1, 70, 70, 10, 1, 70, 1, 1, 1, 1, 70, 1, 70, 70, 1, 1, 1, 1,
         70, 70, 1, 70, 70, 1, 1},
        {70, 1, 70, 1, 1, 1, 1, 1, 70, 70, 1, 1, 1, 1, 1, 1, 70, 10, 70, 1, 70, 1, 70, 70, 70, 1, 1, 1, 1, 70, 1, 1, 70,
         1, 1, 70, 1, 1, 70, 1, 1, 70, 70, 1, 70, 70, 70, 1, 1, 1, 70, 70, 70, 1, 1, 70, 70, 70, 70, 1, 70, 1, 70, 70,
         70, 70, 70, 70, 70, 70},
        {1, 70, 1, 70, 70, 1, 70, 1, 1, 70, 70, 1, 70, 1, 70, 1, 1, 1, 70, 1, 70, 1, 1, 1, 10, 70, 70, 70, 1, 1, 1, 70,
         70, 70, 1, 1, 70, 1, 70, 1, 70, 70, 1, 1, 70, 1, 1, 1, 1, 1, 1, 1, 1, 70, 70, 70, 1, 70, 1, 70, 1, 70, 1, 70,
         1, 70, 70, 70, 1, 1},
        {1, 70, 70, 1, 70, 70, 1, 1, 70, 1, 1, 70, 70, 70, 1, 70, 70, 1, 70, 70, 1, 70, 1, 70, 70, 70, 1, 70, 70, 10,
         70, 1, 1, 70, 70, 1, 1, 70, 70, 70, 1, 1, 70, 1, 1, 1, 70, 1, 1, 70, 70, 1, 1, 1, 70, 1, 1, 1, 1, 1, 70, 70, 1,
         70, 70, 1, 1, 1, 70, 70},
        {1, 70, 70, 70, 70, 70, 1, 1, 70, 1, 1, 70, 70, 70, 10, 1, 70, 70, 70, 70, 70, 70, 70, 1, 70, 1, 70, 70, 1, 1,
         70, 70, 70, 1, 1, 70, 70, 70, 70, 70, 70, 1, 70, 1, 1, 70, 70, 70, 1, 70, 1, 70, 70, 70, 1, 70, 1, 1, 1, 70,
         70, 1, 70, 70, 1, 70, 1, 70, 1, 70},
        {1, 70, 1, 1, 1, 1, 1, 70, 1, 70, 1, 70, 70, 70, 1, 1, 70, 70, 70, 1, 1, 1, 1, 70, 70, 1, 70, 70, 1, 70, 70, 1,
         1, 1, 1, 70, 70, 70, 1, 1, 70, 1, 1, 1, 70, 70, 70, 70, 1, 1, 1, 1, 10, 1, 1, 1, 70, 70, 1, 1, 70, 70, 1, 70,
         70, 1, 70, 1, 70, 1},
        {70, 70, 70, 1, 70, 70, 1, 70, 70, 1, 70, 1, 1, 70, 70, 70, 1, 70, 70, 1, 70, 10, 1, 1, 1, 70, 1, 1, 70, 1, 1,
         70, 1, 70, 1, 70, 70, 70, 70, 1, 70, 70, 70, 1, 70, 1, 1, 1, 70, 1, 70, 1, 70, 1, 1, 70, 70, 70, 1, 1, 70, 70,
         1, 70, 1, 70, 1, 70, 70, 1},
        {70, 1, 1, 70, 70, 70, 70, 70, 70, 70, 1, 1, 70, 1, 1, 1, 70, 70, 1, 70, 70, 1, 70, 1, 70, 70, 1, 70, 1, 1, 1,
         70, 1, 70, 1, 1, 70, 70, 1, 70, 1, 70, 70, 1, 1, 1, 70, 70, 1, 70, 1, 70, 70, 10, 70, 70, 1, 70, 70, 70, 1, 70,
         70, 1, 1, 1, 70, 70, 1, 70},
        {70, 1, 1, 1, 70, 1, 1, 70, 70, 10, 1, 1, 1, 70, 70, 70, 70, 1, 1, 1, 1, 1, 1, 70, 70, 70, 70, 70, 70, 70, 70,
         1, 1, 70, 70, 70, 70, 1, 1, 70, 70, 70, 70, 70, 1, 1, 70, 70, 1, 1, 70, 70, 1, 70, 1, 70, 1, 1, 1, 1, 70, 70,
         1, 1, 70, 1, 70, 1, 70, 1},
        {70, 1, 70, 70, 1, 70, 70, 10, 1, 70, 1, 70, 70, 70, 1, 1, 1, 70, 70, 1, 70, 70, 70, 1, 70, 70, 70, 70, 70, 1,
         1, 1, 1, 70, 1, 70, 70, 70, 70, 70, 1, 70, 70, 70, 70, 70, 1, 70, 70, 1, 70, 1, 70, 70, 1, 70, 1, 1, 1, 70, 70,
         1, 1, 70, 70, 70, 1, 70, 70, 70},
        {70, 1, 70, 70, 1, 70, 1, 70, 1, 70, 70, 1, 1, 1, 1, 1, 1, 1, 70, 70, 1, 70, 70, 70, 70, 1, 70, 70, 1, 1, 1, 70,
         1, 1, 70, 70, 70, 70, 1, 1, 1, 1, 70, 1, 1, 70, 10, 1, 1, 70, 1, 70, 1, 70, 70, 70, 1, 70, 1, 1, 1, 1, 70, 1,
         70, 70, 1, 70, 1, 1},
        {70, 70, 70, 70, 70, 1, 70, 1, 1, 1, 1, 70, 1, 1, 1, 1, 1, 1, 70, 1, 1, 70, 10, 1, 1, 70, 1, 70, 1, 1, 70, 70,
         70, 1, 1, 1, 1, 1, 70, 70, 1, 1, 1, 70, 1, 1, 70, 70, 70, 70, 1, 70, 1, 70, 1, 1, 70, 70, 1, 70, 1, 70, 1, 70,
         1, 70, 70, 70, 70, 1},
        {1, 1, 1, 1, 70, 70, 70, 1, 70, 70, 1, 70, 70, 70, 1, 1, 1, 1, 1, 70, 70, 1, 1, 1, 1, 70, 70, 1, 70, 1, 1, 70,
         70, 70, 1, 70, 70, 1, 70, 70, 1, 70, 70, 70, 70, 70, 1, 1, 1, 70, 70, 70, 1, 1, 1, 70, 70, 10, 1, 70, 70, 1,
         70, 70, 70, 1, 1, 70, 70, 1},
        {1, 70, 70, 70, 1, 1, 1, 70, 70, 1, 1, 1, 70, 1, 70, 70, 70, 1, 70, 70, 1, 1, 70, 70, 70, 1, 1, 1, 70, 70, 70,
         70, 70, 70, 70, 70, 1, 1, 1, 70, 70, 70, 1, 70, 70, 1, 1, 70, 1, 70, 70, 70, 70, 10, 70, 1, 70, 1, 1, 70, 1,
         70, 70, 1, 70, 1, 1, 1, 70, 70},
        {70, 1, 70, 70, 1, 1, 1, 70, 1, 70, 1, 70, 10, 70, 70, 70, 1, 1, 70, 1, 70, 70, 1, 1, 70, 70, 70, 1, 1, 1, 1,
         70, 1, 1, 1, 70, 70, 70, 1, 1, 70, 70, 70, 1, 70, 1, 1, 1, 70, 1, 1, 1, 1, 70, 1, 1, 1, 70, 70, 1, 1, 70, 1, 1,
         70, 1, 70, 70, 70, 70},
        {70, 1, 1, 1, 1, 70, 1, 1, 1, 1, 70, 70, 1, 70, 70, 1, 1, 1, 70, 70, 70, 70, 70, 70, 1, 1, 70, 70, 70, 1, 1, 10,
         70, 1, 1, 70, 70, 70, 70, 70, 70, 70, 70, 1, 70, 70, 1, 1, 1, 70, 1, 70, 1, 70, 70, 1, 1, 1, 1, 1, 1, 70, 1,
         70, 1, 1, 1, 70, 70, 1},
        {1, 70, 70, 70, 1, 1, 70, 70, 70, 1, 10, 70, 70, 1, 70, 70, 70, 70, 1, 1, 1, 70, 70, 70, 1, 1, 70, 1, 1, 70, 70,
         70, 70, 70, 1, 70, 1, 1, 1, 70, 1, 1, 1, 1, 1, 70, 70, 1, 70, 1, 70, 70, 1, 70, 70, 1, 70, 70, 1, 70, 1, 70,
         70, 1, 1, 1, 70, 1, 1, 70},
        {1, 70, 70, 1, 1, 1, 70, 70, 70, 1, 70, 1, 1, 1, 70, 1, 1, 1, 1, 70, 70, 70, 70, 70, 70, 1, 1, 70, 70, 1, 1, 10,
         70, 1, 70, 70, 1, 70, 70, 1, 70, 70, 70, 70, 70, 70, 70, 70, 1, 1, 1, 1, 70, 70, 1, 1, 1, 1, 70, 70, 1, 1, 1,
         70, 1, 70, 1, 1, 1, 1},
        {1, 70, 70, 70, 1, 70, 70, 1, 1, 1, 1, 1, 70, 1, 70, 1, 1, 1, 1, 70, 1, 1, 1, 70, 1, 70, 70, 1, 1, 1, 1, 1, 70,
         10, 1, 70, 70, 70, 1, 1, 70, 1, 1, 70, 1, 70, 70, 70, 1, 70, 70, 1, 70, 1, 1, 70, 70, 1, 70, 1, 1, 1, 1, 70, 1,
         1, 70, 1, 70, 1},
        {70, 70, 1, 1, 70, 70, 1, 1, 70, 1, 70, 1, 1, 70, 1, 70, 1, 70, 1, 1, 70, 1, 1, 70, 70, 1, 1, 1, 10, 70, 1, 70,
         70, 1, 1, 70, 1, 70, 70, 70, 1, 1, 1, 1, 1, 70, 1, 70, 1, 70, 70, 1, 1, 1, 1, 70, 1, 1, 70, 70, 1, 70, 70, 1,
         1, 70, 70, 1, 1, 70},
        {70, 1, 70, 1, 70, 70, 10, 70, 1, 70, 1, 1, 70, 70, 70, 1, 1, 1, 70, 1, 70, 1, 70, 70, 70, 70, 70, 1, 1, 70, 1,
         1, 1, 1, 70, 70, 70, 1, 1, 1, 70, 1, 70, 70, 1, 1, 70, 1, 1, 70, 1, 1, 70, 70, 1, 1, 70, 70, 70, 70, 1, 70, 70,
         1, 1, 1, 70, 70, 1, 70},
        {1, 70, 70, 1, 1, 70, 1, 1, 10, 1, 70, 1, 1, 70, 70, 70, 70, 1, 1, 1, 70, 1, 1, 70, 70, 70, 70, 1, 1, 1, 1, 1,
         70, 70, 1, 70, 70, 1, 1, 70, 1, 70, 1, 70, 70, 1, 70, 1, 1, 1, 70, 70, 70, 1, 1, 1, 1, 70, 70, 1, 1, 70, 1, 1,
         1, 70, 70, 1, 1, 1},
        {70, 70, 1, 1, 1, 1, 70, 1, 1, 70, 1, 70, 1, 1, 1, 70, 70, 70, 70, 70, 70, 1, 70, 70, 1, 70, 1, 70, 1, 70, 70,
         70, 1, 1, 1, 70, 70, 1, 1, 1, 70, 1, 1, 70, 70, 1, 70, 70, 10, 1, 70, 70, 1, 1, 1, 1, 1, 1, 70, 1, 70, 1, 70,
         1, 1, 70, 70, 70, 1, 70},
        {1, 1, 1, 70, 70, 70, 70, 70, 1, 1, 1, 1, 70, 1, 70, 1, 1, 70, 70, 1, 1, 1, 1, 1, 70, 70, 1, 70, 1, 1, 1, 70,
         70, 70, 1, 1, 70, 1, 70, 1, 70, 70, 70, 1, 1, 70, 70, 1, 1, 70, 70, 1, 1, 70, 70, 70, 70, 70, 70, 1, 10, 70,
         70, 70, 1, 70, 1, 70, 70, 70},
        {70, 70, 1, 1, 70, 70, 1, 1, 1, 1, 1, 1, 70, 70, 70, 70, 1, 1, 1, 70, 1, 70, 70, 70, 1, 70, 70, 70, 1, 10, 70,
         70, 1, 1, 70, 70, 1, 1, 1, 1, 70, 1, 1, 1, 1, 1, 1, 1, 1, 1, 70, 70, 1, 70, 70, 70, 70, 1, 1, 70, 1, 70, 70, 1,
         70, 1, 1, 1, 1, 70},
        {1, 70, 1, 70, 1, 70, 70, 10, 1, 70, 70, 1, 1, 1, 70, 70, 1, 1, 1, 1, 70, 70, 1, 1, 70, 70, 1, 1, 1, 70, 70, 70,
         1, 1, 70, 70, 70, 70, 1, 1, 70, 1, 1, 70, 70, 70, 70, 70, 1, 70, 70, 70, 1, 70, 1, 70, 70, 1, 70, 1, 1, 1, 1,
         1, 70, 1, 1, 1, 70, 70},
        {70, 1, 70, 1, 70, 70, 1, 1, 1, 1, 1, 10, 70, 70, 70, 70, 70, 70, 70, 70, 70, 1, 1, 1, 1, 1, 70, 70, 1, 70, 1,
         70, 1, 70, 1, 1, 1, 70, 1, 70, 70, 70, 70, 1, 70, 1, 70, 1, 1, 1, 70, 70, 70, 70, 70, 70, 1, 70, 1, 70, 70, 1,
         1, 1, 1, 70, 70, 1, 1, 70},
        {70, 1, 70, 70, 1, 70, 70, 70, 1, 1, 70, 1, 70, 10, 1, 70, 1, 70, 70, 1, 70, 70, 1, 70, 1, 70, 70, 70, 70, 70,
         1, 70, 1, 1, 1, 70, 1, 70, 1, 70, 1, 1, 70, 70, 1, 1, 70, 70, 70, 1, 70, 70, 70, 1, 70, 1, 70, 70, 70, 70, 70,
         1, 1, 1, 70, 1, 1, 70, 1, 70},
        {1, 70, 1, 1, 70, 1, 70, 1, 70, 70, 70, 70, 1, 70, 1, 1, 70, 70, 1, 70, 70, 70, 70, 70, 1, 1, 70, 1, 70, 1, 1,
         70, 1, 1, 1, 1, 1, 70, 70, 1, 70, 1, 1, 70, 70, 10, 1, 70, 1, 70, 70, 1, 70, 1, 1, 1, 70, 1, 1, 70, 1, 70, 1,
         1, 70, 1, 1, 1, 70, 1},
        {70, 1, 1, 1, 1, 70, 1, 1, 70, 70, 70, 1, 1, 1, 1, 1, 70, 70, 70, 1, 1, 70, 70, 70, 70, 70, 1, 1, 70, 1, 70, 1,
         70, 70, 70, 70, 1, 1, 1, 1, 1, 70, 1, 70, 1, 70, 70, 1, 70, 1, 1, 1, 1, 10, 1, 1, 70, 1, 70, 70, 1, 70, 1, 1,
         1, 70, 70, 70, 1, 1},
        {1, 70, 70, 70, 70, 1, 1, 1, 1, 1, 10, 1, 70, 1, 70, 1, 70, 1, 70, 1, 70, 1, 1, 1, 1, 70, 70, 70, 1, 1, 1, 70,
         1, 1, 1, 1, 70, 1, 70, 1, 70, 1, 70, 70, 1, 70, 70, 70, 1, 1, 70, 1, 70, 1, 1, 70, 1, 70, 70, 70, 1, 1, 1, 70,
         70, 70, 1, 70, 1, 1},
        {70, 1, 1, 1, 1, 70, 1, 70, 1, 70, 70, 1, 1, 1, 1, 1, 70, 70, 1, 70, 1, 1, 70, 1, 1, 1, 70, 70, 1, 70, 70, 70,
         1, 1, 70, 70, 70, 1, 1, 1, 70, 70, 70, 70, 10, 70, 70, 1, 70, 1, 1, 70, 70, 1, 1, 70, 70, 70, 70, 70, 70, 70,
         70, 1, 70, 1, 70, 70, 70, 70},
        {1, 70, 70, 70, 10, 70, 70, 70, 70, 1, 1, 1, 1, 1, 70, 1, 1, 1, 70, 1, 70, 1, 1, 1, 70, 70, 70, 1, 70, 70, 70,
         70, 1, 70, 70, 1, 1, 1, 1, 1, 1, 70, 70, 70, 70, 70, 1, 70, 1, 70, 1, 70, 1, 1, 1, 1, 1, 70, 70, 1, 70, 70, 1,
         1, 70, 70, 70, 1, 1, 70},
        {70, 1, 70, 1, 1, 70, 1, 1, 70, 1, 70, 70, 70, 70, 1, 70, 70, 1, 70, 1, 1, 1, 1, 70, 70, 70, 1, 70, 70, 1, 1,
         70, 1, 1, 70, 70, 70, 1, 10, 70, 70, 1, 70, 70, 1, 1, 70, 1, 70, 1, 70, 70, 70, 1, 1, 1, 70, 70, 1, 1, 1, 70,
         1, 1, 1, 1, 1, 1, 1, 1},
        {1, 70, 70, 1, 70, 1, 1, 1, 1, 70, 70, 1, 70, 1, 70, 1, 1, 1, 1, 70, 1, 1, 1, 1, 70, 70, 70, 1, 1, 70, 70, 1, 1,
         1, 70, 1, 70, 70, 1, 70, 70, 70, 1, 70, 10, 70, 70, 70, 70, 1, 70, 70, 1, 70, 70, 70, 70, 1, 1, 1, 1, 1, 1, 70,
         1, 70, 70, 1, 70, 70},
        {70, 70, 1, 1, 70, 1, 1, 1, 1, 1, 70, 70, 1, 1, 70, 70, 70, 1, 1, 1, 70, 70, 1, 1, 70, 1, 1, 1, 70, 10, 70, 70,
         1, 1, 70, 1, 1, 1, 1, 1, 1, 1, 1, 70, 1, 1, 70, 70, 70, 1, 1, 1, 70, 1, 70, 1, 70, 70, 1, 70, 1, 1, 1, 1, 70,
         1, 1, 1, 1, 70},
        {1, 1, 10, 70, 70, 70, 70, 70, 1, 1, 1, 1, 70, 1, 1, 1, 1, 1, 1, 70, 1, 1, 1, 70, 1, 1, 1, 70, 1, 70, 70, 1, 70,
         70, 1, 1, 70, 70, 70, 1, 70, 70, 1, 1, 1, 1, 70, 70, 1, 1, 70, 1, 70, 1, 70, 70, 1, 70, 70, 70, 1, 1, 1, 70, 1,
         70, 1, 1, 1, 1},
        {1, 1, 1, 70, 1, 70, 1, 70, 1, 1, 1, 70, 1, 1, 1, 70, 1, 70, 70, 1, 10, 70, 1, 1, 1, 1, 1, 70, 1, 70, 70, 1, 70,
         1, 70, 1, 1, 70, 70, 70, 1, 1, 70, 1, 70, 70, 70, 70, 70, 70, 1, 1, 70, 1, 1, 1, 70, 70, 1, 1, 1, 70, 70, 1,
         70, 70, 70, 70, 1, 70},
        {70, 1, 1, 70, 10, 70, 70, 70, 1, 1, 1, 70, 1, 1, 70, 1, 1, 70, 70, 70, 1, 70, 1, 1, 1, 70, 70, 1, 1, 1, 1, 70,
         70, 70, 1, 70, 1, 1, 1, 1, 70, 1, 70, 70, 70, 70, 1, 70, 70, 70, 70, 70, 1, 1, 70, 70, 70, 1, 1, 1, 70, 70, 1,
         70, 1, 1, 1, 1, 70, 1},
        {1, 70, 1, 70, 1, 1, 1, 70, 1, 1, 70, 70, 70, 1, 70, 1, 1, 1, 1, 1, 70, 1, 1, 1, 70, 70, 70, 1, 70, 1, 70, 70,
         1, 70, 70, 70, 1, 1, 70, 1, 1, 70, 70, 1, 70, 1, 1, 1, 70, 1, 70, 1, 70, 1, 70, 10, 70, 1, 70, 70, 1, 70, 70,
         70, 70, 70, 70, 70, 70, 1}};
    const auto a_out = Solution().minimizeTheDifference(mat, 702);
    assert(a_out == 1);

    const auto end_t = std::chrono::high_resolution_clock::now();
    const auto total_t = std::chrono::duration_cast<std::chrono::milliseconds>(end_t - start_t).count();
    std::cerr << total_t << " ms"sv << std::endl;
  }
  std::cerr << "TestSolution OK"sv << std::endl;
}

int main() {
#ifndef NDEBUG
  TestSolution();
#endif
  return 0;
}