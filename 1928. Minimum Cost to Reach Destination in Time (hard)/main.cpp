// #include <bits/stdc++.h>

#include <algorithm>
#include <bitset>
#include <cassert>
#include <chrono>
#include <cmath>
#include <deque>
#include <fstream>
#include <functional>
#include <iomanip>
#include <iostream>
#include <iterator>
#include <limits>
#include <list>
#include <map>
#include <memory>
#include <numeric>
#include <optional>
#include <random>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <unordered_map>
#include <unordered_set>
#include <variant>
#include <vector>

using namespace std::literals;

using ll = long long;
using ii [[maybe_unused]] = std::pair<int, int>;
using vi [[maybe_unused]] = std::vector<int>;
using vl [[maybe_unused]] = std::vector<ll>;
using vvi [[maybe_unused]] = std::vector<vi>;
using vii [[maybe_unused]] = std::vector<ii>;
using vb [[maybe_unused]] = std::vector<bool>;
using vd [[maybe_unused]] = std::vector<double>;
using vs [[maybe_unused]] = std::vector<std::string>;

#define FOR(_i, _a, _b) for (int _i = (_a); _i <= (_b); ++(_i))
#define FORD(_i, _a, _b) for (int _i = (_a); _i >= (_b); --(_i))
#define RNG(_l) (_l).begin(), (_l).end()
#define SORT(_l) std::sort((_l).begin(), (_l).end())
#define CI(_v) static_cast<int>(_v)
#define CL(_v) static_cast<ll>(_v)
#define CD(_v) static_cast<double>(_v)
#define SZ(_v) static_cast<int>((_v).size())
#define F first
#define S second

struct QItem {
  int v, tm, sp;
  bool operator>(const QItem& other) const {
    return std::tie(sp, tm) > std::tie(other.sp, other.tm);
  }
};

class Solution {
public:
  int minCost(const int max_tm, const vvi& edges, const vi& fees) {
    const auto n = SZ(fees);

    std::vector<vii> g(n);
    for (const auto& e : edges) {
      g[e[0]].emplace_back(e[1], e[2]);
      g[e[1]].emplace_back(e[0], e[2]);
    }

    vi times(n, INT_MAX), costs(n, INT_MAX);
    times[0] = 0;
    costs[0] = fees[0];
    
    std::priority_queue<QItem, std::vector<QItem>, std::greater<>> q;
    q.push({0, 0, fees[0]});
    while (!q.empty()) {
      const auto v = q.top().v, v_tm = q.top().tm, v_sp = q.top().sp;
      q.pop();

      if (v == n-1 && v_tm <= max_tm)
        return v_sp;

      for (const auto& [u, w] : g[v]) {
        const auto u_tm = v_tm + w;
        const auto u_sp = v_sp + fees[u];

        if (u_tm <= max_tm && u_sp < costs[u]) {
          times[u] = u_tm;
          costs[u] = u_sp;
          q.push({u, u_tm, u_sp});
        } else if (u_tm < times[u]) {
          times[u] = u_tm;
          q.push({u, u_tm, u_sp});
        }
      }
    }

    return -1;
  }
};

[[maybe_unused]] void TestSolution() {
  {
    const auto start_t = std::chrono::high_resolution_clock::now();

    const vvi edges{{0, 1, 10}, {1, 2, 10}, {2, 5, 10}, {0, 3, 1}, {3, 4, 10}, {4, 5, 15}};
    const vi fs{5, 1, 2, 20, 20, 3};
    const auto a_out = Solution().minCost(30, edges, fs);
    assert(a_out == 11);

    const auto end_t = std::chrono::high_resolution_clock::now();
    const auto total_t = std::chrono::duration_cast<std::chrono::milliseconds>(end_t - start_t).count();
    std::cerr << total_t << " ms"sv << std::endl;
  }
  {
    const auto start_t = std::chrono::high_resolution_clock::now();

    const vvi edges{{0, 1, 10}, {1, 2, 10}, {2, 5, 10}, {0, 3, 1}, {3, 4, 10}, {4, 5, 15}};
    const vi fs{5, 1, 2, 20, 20, 3};
    const auto a_out = Solution().minCost(29, edges, fs);
    assert(a_out == 48);

    const auto end_t = std::chrono::high_resolution_clock::now();
    const auto total_t = std::chrono::duration_cast<std::chrono::milliseconds>(end_t - start_t).count();
    std::cerr << total_t << " ms"sv << std::endl;
  }
  {
    const auto start_t = std::chrono::high_resolution_clock::now();

    const vvi edges{{0, 1, 10}, {1, 2, 10}, {2, 5, 10}, {0, 3, 1}, {3, 4, 10}, {4, 5, 15}};
    const vi fs{5, 1, 2, 20, 20, 3};
    const auto a_out = Solution().minCost(25, edges, fs);
    assert(a_out == -1);

    const auto end_t = std::chrono::high_resolution_clock::now();
    const auto total_t = std::chrono::duration_cast<std::chrono::milliseconds>(end_t - start_t).count();
    std::cerr << total_t << " ms"sv << std::endl;
  }
  {
    const auto start_t = std::chrono::high_resolution_clock::now();

    const vvi edges{{0, 1, 2}, {0, 2, 1}, {2, 3, 2}, {1, 3, 3}, {3, 4, 2}, {3, 5, 3}, {4, 6, 3}, {5, 6, 4}};
    const vi fs{1, 3, 6, 1, 98, 18, 1};
    const auto a_out = Solution().minCost(10, edges, fs);
    assert(a_out == 27);

    const auto end_t = std::chrono::high_resolution_clock::now();
    const auto total_t = std::chrono::duration_cast<std::chrono::milliseconds>(end_t - start_t).count();
    std::cerr << total_t << " ms"sv << std::endl;
  }
  {
    const auto start_t = std::chrono::high_resolution_clock::now();

    const vvi edges{{850, 294, 49}, {862, 355, 34}, {789, 615, 19}, {722, 714, 9}, {376, 174, 42}, {225, 214, 43},
                    {79, 66, 47}, {773, 64, 48}, {172, 61, 27}, {287, 63, 5}, {389, 215, 43}, {281, 183, 28},
                    {558, 68, 34}, {504, 346, 23}, {21, 20, 22}, {126, 112, 5}, {725, 261, 8}, {68, 21, 25},
                    {244, 38, 6}, {798, 755, 23}, {361, 219, 30}, {396, 385, 40}, {590, 385, 16}, {980, 165, 35},
                    {124, 43, 31}, {155, 65, 2}, {731, 184, 37}, {156, 115, 9}, {719, 120, 21}, {38, 16, 44},
                    {892, 229, 40}, {294, 157, 31}, {47, 46, 25}, {206, 141, 39}, {141, 115, 31}, {525, 55, 5},
                    {197, 133, 43}, {256, 129, 20}, {926, 58, 40}, {125, 12, 48}, {863, 120, 18}, {652, 553, 31},
                    {4, 3, 26}, {709, 228, 32}, {973, 335, 18}, {355, 35, 8}, {59, 42, 39}, {485, 175, 10},
                    {199, 80, 23}, {742, 691, 31}, {770, 255, 28}, {322, 227, 4}, {551, 168, 18}, {828, 457, 39},
                    {220, 187, 32}, {842, 520, 1}, {841, 777, 47}, {393, 137, 14}, {510, 29, 44}, {784, 481, 30},
                    {466, 207, 50}, {312, 14, 9}, {800, 366, 17}, {650, 358, 22}, {296, 154, 7}, {533, 442, 7},
                    {940, 307, 20}, {691, 658, 3}, {277, 74, 39}, {366, 87, 28}, {675, 221, 19}, {866, 385, 12},
                    {147, 121, 29}, {212, 147, 39}, {330, 119, 33}, {404, 96, 39}, {472, 242, 28}, {268, 39, 10},
                    {291, 20, 20}, {273, 4, 49}, {176, 52, 27}, {328, 321, 17}, {928, 137, 10}, {426, 413, 2},
                    {165, 76, 29}, {282, 161, 31}, {576, 429, 2}, {929, 47, 39}, {554, 122, 9}, {37, 15, 6},
                    {834, 128, 25}, {849, 720, 3}, {174, 147, 25}, {57, 54, 40}, {873, 786, 32}, {561, 23, 19},
                    {13, 4, 30}, {84, 64, 8}, {627, 321, 13}, {917, 90, 6}, {704, 629, 2}, {708, 473, 35},
                    {588, 442, 26}, {432, 382, 18}, {31, 29, 33}, {486, 109, 8}, {253, 10, 22}, {698, 262, 23},
                    {771, 672, 4}, {619, 37, 15}, {233, 132, 27}, {858, 168, 50}, {935, 582, 25}, {664, 462, 50},
                    {179, 12, 18}, {585, 33, 15}, {444, 236, 41}, {342, 184, 5}, {61, 9, 39}, {132, 124, 15},
                    {490, 468, 44}, {452, 109, 33}, {871, 660, 31}, {870, 463, 29}, {718, 624, 8}, {847, 167, 19},
                    {631, 198, 48}, {610, 166, 2}, {988, 64, 48}, {634, 7, 46}, {550, 235, 37}, {334, 283, 13},
                    {960, 229, 48}, {304, 36, 43}, {451, 148, 40}, {677, 220, 4}, {540, 75, 14}, {293, 11, 25},
                    {901, 221, 50}, {826, 185, 20}, {896, 43, 9}, {659, 99, 43}, {267, 95, 38}, {154, 116, 43},
                    {633, 321, 32}, {599, 286, 44}, {591, 353, 45}, {207, 195, 20}, {283, 97, 19}, {578, 106, 13},
                    {972, 203, 14}, {577, 517, 17}, {183, 134, 22}, {887, 186, 22}, {392, 81, 45}, {351, 144, 9},
                    {380, 267, 43}, {442, 119, 28}, {99, 17, 33}, {963, 316, 43}, {118, 106, 50}, {114, 28, 15},
                    {198, 40, 7}, {574, 227, 42}, {379, 328, 30}, {187, 83, 43}, {794, 263, 12}, {836, 668, 22},
                    {480, 290, 19}, {45, 16, 9}, {670, 631, 10}, {76, 56, 34}, {150, 137, 46}, {918, 913, 25},
                    {58, 14, 42}, {844, 572, 15}, {948, 317, 10}, {483, 210, 37}, {430, 93, 39}, {900, 98, 35},
                    {93, 3, 26}, {270, 122, 18}, {516, 323, 21}, {138, 95, 11}, {872, 297, 5}, {559, 383, 17},
                    {360, 275, 42}, {422, 56, 3}, {974, 9, 20}, {642, 410, 41}, {383, 229, 33}, {995, 642, 37},
                    {26, 14, 18}, {539, 248, 9}, {62, 11, 27}, {185, 50, 32}, {809, 479, 17}, {848, 707, 22},
                    {405, 317, 4}, {325, 72, 27}, {624, 314, 17}, {463, 243, 39}, {660, 367, 48}, {804, 577, 33},
                    {384, 338, 36}, {536, 370, 34}, {601, 44, 16}, {23, 12, 22}, {672, 658, 44}, {616, 182, 38},
                    {796, 253, 47}, {530, 183, 4}, {178, 151, 42}, {966, 676, 1}, {411, 344, 31}, {617, 175, 11},
                    {299, 161, 21}, {424, 384, 25}, {317, 246, 26}, {566, 256, 14}, {713, 358, 20}, {409, 310, 44},
                    {782, 668, 22}, {584, 350, 35}, {471, 459, 33}, {340, 176, 30}, {913, 568, 4}, {217, 88, 25},
                    {987, 136, 45}, {90, 42, 31}, {526, 258, 26}, {387, 343, 42}, {620, 7, 4}, {618, 428, 43},
                    {915, 487, 18}, {812, 470, 19}, {541, 160, 17}, {82, 51, 43}, {950, 131, 18}, {375, 216, 30},
                    {884, 103, 27}, {352, 13, 35}, {547, 541, 2}, {807, 111, 13}, {641, 444, 26}, {297, 270, 15},
                    {537, 421, 20}, {186, 164, 5}, {967, 489, 35}, {210, 116, 42}, {636, 461, 19}, {56, 9, 45},
                    {609, 473, 17}, {238, 65, 16}, {209, 48, 6}, {369, 230, 49}, {167, 135, 16}, {163, 151, 4},
                    {192, 129, 10}, {933, 846, 43}, {851, 12, 50}, {408, 402, 13}, {131, 69, 28}, {175, 103, 41},
                    {814, 13, 21}, {134, 12, 18}, {788, 36, 33}, {573, 297, 45}, {780, 520, 14}, {724, 112, 48},
                    {365, 108, 50}, {484, 257, 41}, {123, 44, 2}, {177, 37, 31}, {323, 68, 37}, {98, 58, 4},
                    {583, 124, 45}, {180, 145, 2}, {70, 46, 26}, {251, 61, 4}, {952, 287, 23}, {682, 507, 16},
                    {315, 279, 7}, {906, 321, 41}, {716, 491, 35}, {32, 8, 50}, {158, 6, 1}, {572, 92, 13}, {25, 3, 11},
                    {965, 528, 22}, {333, 295, 22}, {33, 11, 35}, {752, 79, 50}, {986, 787, 1}, {363, 199, 13},
                    {303, 63, 48}, {401, 374, 36}, {861, 115, 36}, {781, 40, 7}, {876, 773, 24}, {397, 146, 31},
                    {48, 14, 6}, {127, 40, 37}, {482, 272, 18}, {381, 149, 25}, {87, 46, 22}, {354, 8, 24},
                    {882, 254, 43}, {331, 241, 3}, {113, 69, 1}, {666, 601, 1}, {563, 552, 28}, {562, 490, 11},
                    {133, 52, 27}, {168, 35, 23}, {137, 55, 6}, {74, 9, 2}, {846, 293, 1}, {318, 257, 15},
                    {683, 61, 22}, {116, 2, 3}, {702, 264, 31}, {717, 54, 46}, {923, 790, 5}, {640, 283, 3},
                    {285, 86, 11}, {139, 49, 12}, {707, 46, 10}, {833, 78, 42}, {279, 210, 4}, {211, 13, 32},
                    {700, 390, 28}, {372, 370, 19}, {904, 120, 48}, {353, 14, 48}, {46, 0, 13}, {982, 541, 10},
                    {218, 59, 46}, {730, 76, 17}, {479, 464, 17}, {845, 717, 44}, {674, 61, 27}, {319, 130, 12},
                    {723, 512, 32}, {909, 631, 39}, {54, 14, 17}, {564, 524, 42}, {306, 37, 11}, {741, 505, 43},
                    {394, 233, 20}, {521, 278, 3}, {49, 41, 50}, {314, 270, 32}, {639, 176, 23}, {750, 713, 17},
                    {977, 616, 15}, {489, 119, 6}, {332, 42, 37}, {877, 417, 8}, {259, 163, 29}, {758, 579, 25},
                    {991, 168, 12}, {739, 693, 48}, {166, 123, 15}, {487, 383, 40}, {998, 490, 1}, {278, 227, 26},
                    {651, 544, 48}, {309, 225, 17}, {200, 86, 43}, {738, 154, 43}, {944, 334, 19}, {310, 233, 50},
                    {792, 621, 14}, {661, 498, 47}, {740, 175, 43}, {964, 29, 17}, {152, 65, 35}, {687, 361, 32},
                    {524, 405, 16}, {400, 218, 20}, {768, 241, 11}, {810, 622, 24}, {8, 6, 10}, {978, 932, 38},
                    {821, 170, 44}, {506, 235, 29}, {532, 431, 20}, {337, 13, 50}, {899, 53, 12}, {839, 369, 1},
                    {258, 126, 35}, {295, 205, 19}, {595, 401, 15}, {925, 910, 43}, {838, 272, 39}, {445, 402, 8},
                    {128, 126, 36}, {263, 215, 24}, {83, 41, 20}, {425, 214, 5}, {795, 177, 25}, {843, 351, 47},
                    {469, 447, 46}, {832, 743, 45}, {755, 604, 36}, {902, 718, 21}, {111, 76, 25}, {680, 341, 19},
                    {953, 55, 1}, {226, 49, 16}, {679, 329, 15}, {447, 414, 3}, {975, 635, 16}, {602, 74, 39},
                    {868, 425, 2}, {655, 230, 31}, {264, 67, 29}, {36, 0, 22}, {468, 460, 44}, {201, 46, 15},
                    {339, 236, 29}, {697, 116, 35}, {911, 539, 4}, {808, 698, 12}, {822, 517, 30}, {637, 48, 35},
                    {348, 219, 45}, {546, 447, 7}, {443, 210, 50}, {143, 22, 11}, {88, 17, 1}, {421, 355, 40},
                    {290, 153, 39}, {455, 251, 2}, {316, 54, 4}, {579, 118, 39}, {356, 34, 28}, {344, 323, 13},
                    {326, 62, 12}, {385, 77, 49}, {65, 1, 24}, {894, 627, 35}, {711, 632, 33}, {785, 564, 14},
                    {66, 40, 6}, {930, 579, 40}, {386, 87, 43}, {359, 124, 19}, {997, 995, 30}, {910, 552, 14},
                    {121, 52, 11}, {170, 118, 44}, {499, 462, 37}, {518, 380, 8}, {428, 168, 21}, {311, 244, 12},
                    {301, 132, 24}, {932, 879, 35}, {879, 448, 25}, {735, 554, 20}, {681, 215, 37}, {437, 358, 42},
                    {10, 9, 40}, {24, 21, 29}, {959, 888, 9}, {148, 113, 18}, {903, 775, 49}, {715, 285, 39},
                    {632, 358, 22}, {703, 676, 1}, {920, 571, 8}, {827, 402, 11}, {984, 188, 3}, {575, 340, 41},
                    {753, 276, 22}, {2, 0, 22}, {729, 429, 39}, {970, 6, 14}, {608, 95, 34}, {423, 84, 37},
                    {104, 92, 30}, {371, 246, 32}, {239, 206, 4}, {921, 250, 43}, {55, 1, 43}, {122, 113, 43},
                    {161, 115, 47}, {357, 263, 9}, {956, 14, 44}, {857, 170, 24}, {427, 48, 38}, {644, 348, 2},
                    {733, 77, 12}, {736, 691, 36}, {751, 258, 48}, {919, 748, 2}, {91, 66, 5}, {140, 32, 17},
                    {229, 148, 31}, {790, 101, 36}, {793, 175, 45}, {999, 888, 44}, {182, 33, 38}, {881, 313, 18},
                    {761, 639, 1}, {265, 0, 49}, {527, 474, 20}, {434, 309, 49}, {907, 388, 7}, {85, 60, 12},
                    {621, 611, 31}, {374, 267, 13}, {951, 768, 39}, {993, 576, 5}, {649, 55, 10}, {854, 590, 47},
                    {962, 28, 22}, {358, 9, 26}, {164, 91, 37}, {662, 83, 49}, {859, 208, 38}, {897, 541, 47},
                    {305, 158, 29}, {695, 516, 25}, {194, 84, 28}, {548, 542, 13}, {69, 63, 14}, {284, 115, 10},
                    {144, 45, 10}, {362, 328, 40}, {242, 142, 22}, {173, 128, 23}, {676, 600, 40}, {508, 60, 33},
                    {364, 322, 34}, {961, 215, 8}, {766, 561, 4}, {373, 97, 17}, {775, 298, 9}, {436, 130, 27},
                    {435, 304, 21}, {250, 44, 45}, {556, 397, 22}, {531, 38, 3}, {648, 579, 26}, {979, 402, 25},
                    {891, 612, 28}, {286, 241, 17}, {569, 526, 33}, {515, 311, 50}, {603, 429, 44}, {806, 166, 24},
                    {196, 154, 1}, {205, 181, 45}, {534, 426, 34}, {819, 351, 35}, {454, 422, 18}, {701, 175, 27},
                    {816, 640, 50}, {89, 20, 20}, {673, 407, 28}, {596, 415, 11}, {461, 21, 48}, {300, 232, 2},
                    {202, 81, 31}, {646, 144, 47}, {567, 134, 39}, {249, 211, 5}, {802, 183, 35}, {513, 7, 21},
                    {446, 391, 6}, {63, 54, 47}, {160, 106, 33}, {189, 110, 14}, {34, 2, 33}, {449, 298, 26},
                    {130, 48, 34}, {720, 136, 32}, {221, 48, 39}, {734, 640, 18}, {898, 610, 33}, {407, 277, 25},
                    {514, 33, 3}, {106, 25, 33}, {645, 171, 40}, {213, 51, 7}, {744, 193, 33}, {934, 303, 35},
                    {507, 239, 16}, {453, 448, 26}, {693, 34, 2}, {441, 164, 37}, {388, 17, 29}, {467, 112, 29},
                    {592, 299, 5}, {797, 237, 15}, {171, 99, 14}, {983, 908, 14}, {50, 6, 27}, {246, 164, 20},
                    {817, 14, 27}, {41, 4, 6}, {936, 169, 35}, {694, 433, 18}, {5, 1, 11}, {509, 84, 32},
                    {271, 221, 16}, {520, 204, 1}, {191, 102, 28}, {450, 418, 19}, {880, 525, 17}, {760, 383, 1},
                    {214, 12, 7}, {519, 198, 36}, {22, 8, 42}, {774, 172, 33}, {298, 39, 21}, {129, 31, 46},
                    {726, 654, 33}, {668, 592, 44}, {924, 708, 7}, {786, 269, 27}, {593, 191, 34}, {248, 118, 2},
                    {419, 64, 16}, {9, 5, 28}, {224, 148, 47}, {712, 176, 11}, {329, 256, 11}, {159, 48, 44},
                    {946, 909, 5}, {491, 9, 14}, {565, 443, 4}, {231, 52, 19}, {456, 280, 41}, {689, 229, 7},
                    {581, 128, 11}, {757, 570, 46}, {347, 207, 46}, {115, 106, 37}, {942, 509, 6}, {77, 8, 47},
                    {811, 569, 42}, {420, 44, 9}, {27, 13, 4}, {448, 431, 6}, {522, 412, 33}, {654, 364, 9},
                    {307, 265, 5}, {72, 28, 50}, {439, 311, 36}, {496, 448, 34}, {464, 22, 34}, {433, 263, 23},
                    {772, 196, 8}, {30, 14, 4}, {671, 388, 38}, {481, 321, 44}, {7, 1, 34}, {582, 378, 10},
                    {890, 613, 13}, {779, 79, 21}, {162, 133, 31}, {931, 622, 49}, {195, 116, 13}, {412, 200, 38},
                    {117, 58, 11}, {151, 35, 42}, {856, 570, 2}, {473, 195, 12}, {721, 447, 14}, {478, 115, 7},
                    {629, 307, 30}, {883, 276, 32}, {368, 205, 33}, {831, 477, 11}, {81, 4, 25}, {476, 218, 8},
                    {835, 201, 22}, {203, 153, 40}, {502, 232, 47}, {875, 535, 44}, {288, 287, 48}, {878, 137, 49},
                    {604, 161, 40}, {222, 106, 41}, {92, 36, 23}, {643, 387, 8}, {377, 272, 50}, {852, 679, 34},
                    {146, 106, 48}, {462, 312, 35}, {16, 7, 46}, {17, 6, 2}, {157, 154, 5}, {109, 41, 45},
                    {557, 419, 10}, {470, 146, 41}, {867, 273, 5}, {762, 671, 3}, {135, 34, 26}, {149, 49, 9},
                    {865, 7, 46}, {28, 6, 6}, {477, 346, 39}, {416, 59, 26}, {613, 184, 22}, {941, 524, 4},
                    {308, 231, 17}, {223, 188, 34}, {35, 12, 8}, {893, 594, 7}, {803, 793, 40}, {523, 6, 26},
                    {343, 197, 2}, {338, 318, 12}, {15, 8, 39}, {181, 58, 37}, {989, 439, 31}, {622, 29, 18},
                    {119, 17, 7}, {667, 606, 22}, {699, 168, 31}, {501, 285, 45}, {656, 307, 12}, {943, 408, 3},
                    {776, 554, 47}, {11, 0, 50}, {255, 204, 27}, {727, 137, 30}, {18, 1, 43}, {764, 428, 7},
                    {136, 121, 32}, {777, 579, 8}, {105, 10, 44}, {215, 35, 35}, {260, 73, 28}, {188, 2, 24},
                    {535, 513, 43}, {544, 182, 29}, {799, 527, 33}, {685, 513, 27}, {765, 533, 40}, {73, 69, 17},
                    {638, 480, 6}, {493, 416, 4}, {398, 20, 45}, {529, 386, 24}, {440, 94, 24}, {184, 47, 33},
                    {555, 381, 30}, {241, 119, 23}, {905, 827, 30}, {517, 381, 34}, {382, 40, 19}, {495, 217, 2},
                    {787, 210, 22}, {825, 161, 19}, {289, 124, 41}, {607, 411, 35}, {969, 833, 24}, {367, 140, 7},
                    {142, 126, 19}, {568, 390, 21}, {763, 272, 29}, {413, 228, 23}, {391, 94, 8}, {320, 157, 45},
                    {272, 132, 7}, {227, 131, 26}, {216, 168, 24}, {193, 174, 17}, {560, 221, 47}, {922, 606, 35},
                    {86, 15, 50}, {912, 527, 1}, {112, 107, 36}, {240, 77, 24}, {313, 53, 21}, {3, 0, 17}, {67, 6, 43},
                    {611, 585, 27}, {460, 257, 11}, {43, 27, 10}, {395, 266, 24}, {589, 239, 29}, {78, 49, 16},
                    {587, 306, 18}, {630, 260, 37}, {947, 937, 24}, {327, 129, 43}, {457, 184, 20}, {914, 748, 45},
                    {75, 41, 45}, {492, 288, 25}, {403, 15, 10}, {710, 4, 1}, {257, 108, 22}, {957, 403, 37},
                    {542, 257, 33}, {42, 10, 47}, {939, 433, 34}, {20, 3, 49}, {243, 177, 8}, {390, 247, 12},
                    {107, 48, 3}, {981, 566, 17}, {626, 400, 49}, {840, 131, 40}, {498, 440, 16}, {598, 403, 8},
                    {623, 117, 16}, {885, 442, 30}, {823, 78, 5}, {976, 435, 47}, {869, 648, 1}, {791, 421, 3},
                    {657, 430, 43}, {747, 339, 41}, {110, 94, 44}, {103, 69, 6}, {690, 584, 31}, {237, 123, 39},
                    {254, 19, 45}, {350, 339, 27}, {888, 760, 25}, {829, 651, 19}, {635, 186, 23}, {714, 532, 13},
                    {97, 27, 21}, {80, 5, 21}, {410, 106, 15}, {415, 26, 22}, {805, 47, 1}, {570, 499, 36},
                    {647, 162, 33}, {51, 7, 28}, {853, 419, 35}, {292, 104, 41}, {778, 213, 46}, {990, 331, 33},
                    {234, 202, 10}, {497, 452, 43}, {756, 675, 16}, {438, 103, 37}, {528, 510, 6}, {686, 206, 18},
                    {429, 201, 32}, {94, 65, 6}, {837, 773, 32}, {101, 97, 33}, {324, 58, 38}, {153, 18, 22},
                    {769, 604, 41}, {830, 825, 17}, {1, 0, 11}, {275, 193, 23}, {815, 474, 28}, {228, 123, 48},
                    {269, 193, 12}, {864, 661, 14}, {606, 438, 4}, {465, 217, 16}, {261, 107, 28}, {653, 58, 20},
                    {60, 38, 18}, {614, 347, 1}, {335, 300, 40}, {406, 76, 5}, {145, 30, 48}, {474, 348, 8},
                    {230, 128, 42}, {219, 121, 44}, {949, 45, 48}, {886, 145, 30}, {208, 93, 50}, {728, 304, 15},
                    {345, 134, 6}, {916, 525, 11}, {874, 732, 15}, {71, 45, 28}, {302, 193, 36}, {545, 367, 23},
                    {262, 102, 44}, {100, 45, 37}, {494, 449, 34}, {767, 691, 15}, {247, 87, 42}, {418, 178, 10},
                    {458, 355, 37}, {669, 257, 48}, {625, 467, 12}, {321, 37, 43}, {663, 618, 43}, {971, 157, 33},
                    {39, 7, 17}, {994, 518, 45}, {276, 274, 47}, {908, 291, 3}, {102, 5, 2}, {615, 483, 38},
                    {431, 204, 49}, {245, 236, 16}, {783, 215, 13}, {266, 212, 45}, {754, 444, 10}, {399, 26, 22},
                    {860, 698, 16}, {40, 9, 2}, {996, 72, 33}, {696, 112, 44}, {511, 351, 30}, {64, 38, 33},
                    {417, 281, 39}, {538, 98, 35}, {500, 233, 31}, {749, 39, 47}, {346, 72, 37}, {29, 3, 37},
                    {968, 219, 9}, {475, 456, 35}, {459, 174, 31}, {169, 64, 19}, {571, 192, 7}, {280, 42, 46},
                    {605, 384, 19}, {95, 53, 18}, {274, 215, 27}, {759, 726, 26}, {889, 756, 7}, {12, 5, 3},
                    {743, 202, 30}, {705, 451, 47}, {684, 611, 39}, {813, 526, 3}, {945, 706, 28}, {19, 12, 3},
                    {552, 76, 37}, {236, 101, 43}, {748, 450, 27}, {108, 4, 50}, {543, 460, 25}, {600, 251, 28},
                    {252, 212, 34}, {96, 92, 45}, {370, 98, 35}, {612, 209, 7}, {992, 918, 6}, {895, 690, 40},
                    {688, 449, 40}, {6, 4, 5}, {336, 220, 49}, {120, 31, 18}, {44, 7, 20}, {732, 419, 34},
                    {665, 472, 29}, {414, 154, 24}, {597, 39, 34}, {594, 452, 4}, {235, 76, 10}, {553, 397, 45},
                    {349, 164, 39}, {938, 433, 18}, {746, 386, 24}, {985, 276, 19}, {628, 477, 41}, {503, 39, 9},
                    {824, 74, 30}, {818, 1, 48}, {512, 96, 30}, {958, 463, 14}, {820, 275, 3}, {341, 15, 40},
                    {190, 137, 29}, {586, 252, 49}, {52, 16, 4}, {488, 397, 3}, {937, 601, 17}, {855, 613, 42},
                    {678, 40, 9}, {378, 320, 3}, {14, 7, 8}, {658, 572, 5}, {692, 457, 32}, {737, 550, 29},
                    {232, 135, 1}, {204, 86, 42}, {955, 279, 49}, {402, 302, 18}, {745, 20, 48}, {505, 247, 22},
                    {549, 447, 22}, {927, 840, 14}, {580, 412, 13}, {954, 497, 17}, {706, 17, 38}, {53, 9, 22},
                    {801, 195, 4}};
    const vi fs{522, 279, 358, 567, 811, 116, 689, 76, 546, 598, 593, 791, 874, 530, 213, 781, 672, 347, 853, 195, 520,
                103, 535, 414, 249, 600, 701, 439, 845, 228, 581, 769, 213, 240, 651, 337, 739, 387, 930, 955, 242, 506,
                651, 71, 827, 838, 247, 23, 298, 84, 702, 454, 610, 242, 789, 126, 634, 933, 439, 737, 29, 83, 114, 105,
                224, 886, 383, 774, 269, 23, 1, 727, 15, 288, 312, 632, 823, 371, 834, 576, 172, 751, 633, 164, 988, 39,
                328, 868, 999, 1000, 709, 780, 779, 479, 455, 195, 981, 799, 714, 664, 689, 810, 960, 609, 91, 401, 823,
                424, 132, 316, 397, 237, 222, 104, 216, 450, 875, 797, 149, 36, 141, 384, 717, 97, 420, 103, 781, 126,
                41, 70, 25, 290, 205, 139, 893, 713, 883, 710, 105, 570, 305, 665, 329, 993, 909, 460, 108, 616, 936,
                18, 339, 520, 73, 710, 353, 897, 177, 607, 482, 887, 603, 891, 109, 666, 990, 972, 22, 496, 95, 471, 12,
                645, 956, 78, 3, 109, 676, 983, 128, 363, 335, 869, 40, 338, 11, 446, 167, 101, 398, 147, 735, 354, 717,
                425, 42, 235, 584, 101, 851, 788, 808, 35, 776, 499, 166, 5, 370, 108, 1, 672, 422, 228, 710, 684, 908,
                978, 960, 810, 533, 563, 931, 120, 239, 978, 804, 266, 165, 11, 6, 738, 415, 275, 461, 225, 37, 272,
                144, 968, 729, 355, 678, 69, 507, 878, 370, 912, 447, 883, 810, 879, 336, 807, 194, 160, 603, 758, 245,
                624, 802, 816, 120, 422, 92, 358, 981, 993, 198, 630, 779, 620, 829, 91, 494, 538, 478, 186, 95, 480,
                476, 124, 895, 162, 560, 446, 209, 115, 217, 471, 636, 859, 801, 536, 148, 253, 69, 212, 378, 715, 996,
                836, 706, 462, 733, 909, 924, 46, 21, 332, 2, 964, 807, 52, 310, 845, 138, 408, 780, 379, 157, 106, 605,
                129, 546, 767, 747, 553, 983, 990, 320, 552, 686, 122, 918, 381, 116, 847, 30, 651, 192, 824, 840, 281,
                461, 586, 232, 832, 788, 414, 398, 647, 679, 943, 627, 743, 647, 597, 846, 416, 979, 731, 54, 852, 272,
                346, 624, 97, 420, 519, 611, 923, 784, 611, 100, 852, 837, 923, 127, 229, 356, 379, 667, 471, 315, 882,
                67, 890, 279, 444, 927, 230, 249, 625, 3, 407, 572, 488, 453, 224, 917, 125, 377, 752, 251, 944, 504,
                987, 40, 658, 92, 343, 669, 729, 882, 199, 315, 349, 884, 948, 676, 711, 287, 405, 310, 508, 784, 884,
                7, 641, 599, 49, 929, 971, 65, 519, 537, 17, 262, 918, 318, 905, 15, 856, 429, 509, 546, 434, 616, 770,
                476, 620, 394, 73, 981, 59, 462, 847, 289, 353, 787, 664, 942, 584, 175, 151, 301, 443, 80, 454, 139,
                608, 522, 941, 459, 665, 893, 73, 434, 303, 149, 293, 563, 951, 361, 151, 949, 795, 317, 562, 585, 665,
                575, 875, 656, 587, 172, 362, 309, 363, 552, 915, 540, 801, 642, 209, 739, 786, 771, 905, 940, 666, 538,
                353, 298, 140, 193, 88, 245, 584, 716, 897, 184, 327, 955, 458, 940, 833, 864, 27, 686, 670, 152, 506,
                810, 968, 858, 411, 202, 689, 275, 827, 929, 100, 597, 825, 274, 515, 500, 277, 127, 631, 783, 965, 26,
                348, 896, 263, 575, 969, 755, 284, 625, 258, 50, 118, 545, 498, 433, 328, 556, 635, 814, 73, 59, 949,
                208, 321, 798, 118, 152, 195, 952, 548, 768, 556, 8, 155, 717, 479, 69, 32, 32, 374, 739, 734, 608, 315,
                657, 739, 604, 267, 900, 333, 565, 480, 206, 333, 550, 334, 467, 676, 176, 381, 146, 358, 859, 516, 367,
                652, 627, 137, 431, 309, 736, 890, 131, 417, 160, 925, 81, 437, 554, 795, 661, 12, 767, 843, 45, 613,
                314, 196, 773, 942, 234, 850, 154, 982, 434, 67, 668, 928, 490, 95, 868, 313, 504, 991, 879, 865, 112,
                318, 101, 710, 927, 46, 255, 896, 777, 570, 721, 120, 447, 770, 380, 391, 806, 998, 203, 54, 67, 151,
                294, 284, 250, 423, 744, 372, 675, 152, 858, 70, 124, 259, 549, 646, 243, 979, 577, 953, 36, 544, 972,
                697, 214, 420, 358, 812, 712, 940, 93, 889, 909, 974, 913, 767, 247, 657, 526, 720, 421, 722, 644, 686,
                653, 402, 160, 402, 691, 259, 967, 669, 878, 883, 869, 794, 218, 481, 889, 811, 55, 93, 245, 297, 731,
                305, 893, 665, 781, 726, 342, 395, 883, 908, 244, 345, 302, 180, 759, 836, 808, 82, 454, 942, 738, 552,
                598, 731, 321, 16, 65, 771, 912, 138, 842, 843, 983, 724, 877, 550, 811, 485, 173, 288, 999, 113, 434,
                418, 612, 852, 786, 680, 321, 210, 759, 386, 737, 832, 451, 401, 649, 491, 867, 862, 35, 609, 506, 154,
                772, 294, 801, 453, 688, 434, 587, 842, 879, 719, 523, 718, 812, 503, 804, 848, 564, 668, 980, 111, 893,
                688, 361, 87, 840, 574, 555, 107, 40, 191, 935, 190, 561, 847, 534, 959, 357, 996, 498, 266, 668, 102,
                862, 976, 500, 18, 967, 318, 633, 97, 408, 680, 50, 129, 247, 514, 596, 868, 671, 474, 886, 570, 242,
                1000, 868, 436, 840, 372, 717, 854, 374, 257, 702, 332, 22, 410, 155, 925, 791, 861, 170, 623, 731, 744,
                417, 965, 821, 118, 907, 176, 101, 409, 931, 196, 885, 978, 111, 578, 443, 599, 695, 311, 797, 670, 571,
                328, 475, 594, 625, 408, 27, 856, 91, 874, 677, 132, 51, 26, 692, 594, 532, 454, 916, 339, 975, 510,
                867, 875, 380, 580, 141, 266, 2, 926, 487, 35, 655, 765, 871, 17, 329, 177, 911, 159, 345, 247, 968,
                420, 590, 190, 719, 504, 658, 973, 623, 437, 205, 94, 423, 874, 285, 370, 478, 553, 728, 628, 594, 411,
                259, 537, 499, 897, 918, 41, 589, 2, 855, 433, 715, 852, 255, 520, 781, 769, 727, 829, 868, 553, 293,
                944, 35, 127, 834, 606};
    const auto a_out = Solution().minCost(625, edges, fs);
    assert(a_out == 6458);

    const auto end_t = std::chrono::high_resolution_clock::now();
    const auto total_t = std::chrono::duration_cast<std::chrono::milliseconds>(end_t - start_t).count();
    std::cerr << total_t << " ms"sv << std::endl;
  }
  std::cerr << "TestSolution OK"sv << std::endl;
}

int main() {
#ifndef NDEBUG
  TestSolution();
#endif
  return 0;
}