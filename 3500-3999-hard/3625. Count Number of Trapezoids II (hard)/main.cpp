// #include <bits/stdc++.h>

#include <algorithm>
#include <bitset>
#include <cassert>
#include <chrono>
#include <cmath>
#include <deque>
#include <fstream>
#include <functional>
#include <iomanip>
#include <iostream>
#include <iterator>
#include <limits>
#include <list>
#include <map>
#include <memory>
#include <numeric>
#include <optional>
#include <queue>
#include <random>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <unordered_map>
#include <unordered_set>
#include <variant>
#include <vector>

using namespace std::literals;

using ll = long long;
using ld = long double;
using ii = std::pair<int, int>;
using vi = std::vector<int>;
using vvi = std::vector<vi>;
using vvvi = std::vector<vvi>;
using vl = std::vector<ll>;
using vvl = std::vector<vl>;
using vvvl = std::vector<vvl>;
using vii = std::vector<ii>;
using vb = std::vector<bool>;
using vd = std::vector<ld>;
using vs = std::vector<std::string>;
using vc = std::vector<char>;

#define FOR(_i, _a, _b) for (auto _i = (_a); _i <= (_b); ++(_i))
#define FORD(_i, _a, _b) for (auto _i = (_a); _i >= (_b); --(_i))
#define RNG(_l) (_l).begin(), (_l).end()
#define SORT(_l) std::sort((_l).begin(), (_l).end())
#define CI(_v) static_cast<int>(_v)
#define CL(_v) static_cast<ll>(_v)
#define CD(_v) static_cast<ld>(_v)
#define CC(_v) static_cast<char>(_v)
#define SZ(_v) static_cast<int>((_v).size())
#define F first
#define S second
#define PB push_back

ii Normalize(int a, int b) {
  if (a < 0 || (a == 0 && b < 0)) a = -a, b = -b;
  if (a * b == 0) {
    if (a == 0)
      b = 1;
    else
      a = 1;
  } else {
    const auto g = std::gcd(std::abs(a), std::abs(b));
    a /= g, b /= g;
  }
  return {a, b};
}

class Solution {
 public:
  int countTrapezoids(const vvi& points) {
    const auto n = SZ(points);
    std::map<ii, std::map<int, int>> slope_c_cnt;
    std::map<ii, std::map<int, std::map<int, int>>> slope_c_len_cnt;
    FOR(i, 0, n - 1) {
      const auto xi = points[i][0], yi = points[i][1];
      FOR(j, i + 1, n - 1) {
        const auto xj = points[j][0], yj = points[j][1];
        const auto len = (xi - xj) * (xi - xj) + (yj - yi) * (yj - yi);
        const auto [a, b] = Normalize(yj - yi, xi - xj);
        const auto c = a * xi + b * yi;
        ++slope_c_cnt[{a, b}][c];
        ++slope_c_len_cnt[{a, b}][c][len];
      }
    }
    auto all = 0;
    for (const auto& [slope, c_cnt] : slope_c_cnt) {
      auto prev = 0;
      for (const auto& [c, cnt] : c_cnt) {
        all += cnt * prev;
        prev += cnt;
      }
    }
    auto dec = 0;
    for (const auto& [slope, c_len_cnt] : slope_c_len_cnt) {
      std::unordered_map<int, int> prev_len_cnt;
      for (const auto& [c, len_cnt] : c_len_cnt) {
        for (const auto& [len, cnt] : len_cnt) {
          dec += cnt * prev_len_cnt[len];
          prev_len_cnt[len] += cnt;
        }
      }
    }
    const auto res = all - (dec >> 1);
    return res;
  }
};

[[maybe_unused]] void TestSolution() {
  {
    const auto start_t = std::chrono::high_resolution_clock::now();

    vvi points{{0, 0}, {1, 1}, {2, 2}, {3, 3}};
    const auto a_out = Solution().countTrapezoids(points);
    assert(a_out == 0);

    const auto end_t = std::chrono::high_resolution_clock::now();
    const auto total_t = std::chrono::duration_cast<std::chrono::milliseconds>(end_t - start_t).count();
    std::cerr << total_t << " ms"sv << std::endl;
  }
  {
    const auto start_t = std::chrono::high_resolution_clock::now();

    vvi points{{-3, 2}, {3, 0}, {2, 3}, {3, 2}, {2, -3}};
    const auto a_out = Solution().countTrapezoids(points);
    assert(a_out == 2);

    const auto end_t = std::chrono::high_resolution_clock::now();
    const auto total_t = std::chrono::duration_cast<std::chrono::milliseconds>(end_t - start_t).count();
    std::cerr << total_t << " ms"sv << std::endl;
  }
  {
    const auto start_t = std::chrono::high_resolution_clock::now();

    vvi points{{0, 0}, {1, 0}, {0, 1}, {2, 1}};
    const auto a_out = Solution().countTrapezoids(points);
    assert(a_out == 1);

    const auto end_t = std::chrono::high_resolution_clock::now();
    const auto total_t = std::chrono::duration_cast<std::chrono::milliseconds>(end_t - start_t).count();
    std::cerr << total_t << " ms"sv << std::endl;
  }
  {
    const auto start_t = std::chrono::high_resolution_clock::now();

    vvi points{{-32, 12}, {-32, -94}, {-32, -15}, {-30, 88}};
    const auto a_out = Solution().countTrapezoids(points);
    assert(a_out == 0);

    const auto end_t = std::chrono::high_resolution_clock::now();
    const auto total_t = std::chrono::duration_cast<std::chrono::milliseconds>(end_t - start_t).count();
    std::cerr << total_t << " ms"sv << std::endl;
  }
  {
    const auto start_t = std::chrono::high_resolution_clock::now();

    vvi points{{0, 0}, {3, 0}, {1, 6}, {4, 6}};
    const auto a_out = Solution().countTrapezoids(points);
    assert(a_out == 1);

    const auto end_t = std::chrono::high_resolution_clock::now();
    const auto total_t = std::chrono::duration_cast<std::chrono::milliseconds>(end_t - start_t).count();
    std::cerr << total_t << " ms"sv << std::endl;
  }
  {
    const auto start_t = std::chrono::high_resolution_clock::now();

    vvi points{
        {125, -174},  {-196, -434}, {-149, -231}, {102, -222},  {-192, -473}, {-458, -120}, {-397, 262},  {243, 46},
        {84, -222},   {-261, -226}, {199, -104},  {-192, -444}, {-144, 499},  {-171, 262},  {-425, -457}, {-458, -271},
        {164, -496},  {-449, -46},  {-459, -102}, {259, -222},  {326, -260},  {416, -495},  {-404, 98},   {342, -469},
        {-165, 499},  {-317, 112},  {-459, 446},  {271, 273},   {460, 426},   {-395, -473}, {-227, -50},  {-358, 284},
        {386, 284},   {-449, -133}, {-495, 361},  {301, 408},   {-202, -222}, {-122, -367}, {199, -223},  {301, 499},
        {46, -243},   {-251, 196},  {-449, 406},  {445, -174},  {-458, -164}, {-458, 446},  {-423, -222}, {332, 498},
        {24, 446},    {-409, 262},  {-309, -371}, {-497, 213},  {445, 475},   {-75, 262},   {-488, 499},  {421, 337},
        {69, -112},   {120, -457},  {45, -222},   {221, 196},   {84, 337},    {386, -457},  {-41, 446},   {14, -457},
        {410, 446},   {443, 361},   {-43, -317},  {164, 134},   {-43, -308},  {-290, -457}, {-103, 46},   {-497, 446},
        {423, -137},  {155, 445},   {271, -18},   {-175, 152},  {-458, -112}, {34, 45},     {-122, 499},  {-497, -119},
        {-48, -119},  {24, -222},   {189, -457},  {14, -7},     {-289, -371}, {-349, -50},  {-335, -222}, {-149, 499},
        {-397, -112}, {61, -457},   {89, 407},    {199, 352},   {-189, 319},  {416, -135},  {199, -222},  {-132, 499},
        {-380, -371}, {-115, -260}, {-337, 475},  {81, -285},   {388, -222},  {-37, -457},  {34, -168},   {98, -495},
        {84, -393},   {148, -174},  {-449, 446},  {-425, 419},  {61, -270},   {-458, -469}, {-413, -98},  {326, 49},
        {-158, -318}, {46, 446},    {-380, 152},  {3, 475},     {-458, -442}, {433, -469},  {-192, 89},   {-272, 227},
        {470, 446}};
    const auto a_out = Solution().countTrapezoids(points);
    assert(a_out == 12521);

    const auto end_t = std::chrono::high_resolution_clock::now();
    const auto total_t = std::chrono::duration_cast<std::chrono::milliseconds>(end_t - start_t).count();
    std::cerr << total_t << " ms"sv << std::endl;
  }
  {
    const auto start_t = std::chrono::high_resolution_clock::now();

    vvi points{
        {-1000, 1000}, {-1000, 999}, {1000, 996}, {1000, 995}, {-1000, 996}, {-1000, 995}, {1000, 992}, {1000, 991},
        {-1000, 992},  {-1000, 991}, {1000, 988}, {1000, 987}, {-1000, 988}, {-1000, 987}, {1000, 984}, {1000, 983},
        {-1000, 984},  {-1000, 983}, {1000, 980}, {1000, 979}, {-1000, 980}, {-1000, 979}, {1000, 976}, {1000, 975},
        {-1000, 976},  {-1000, 975}, {1000, 972}, {1000, 971}, {-1000, 972}, {-1000, 971}, {1000, 968}, {1000, 967},
        {-1000, 968},  {-1000, 967}, {1000, 964}, {1000, 963}, {-1000, 964}, {-1000, 963}, {1000, 960}, {1000, 959},
        {-1000, 960},  {-1000, 959}, {1000, 956}, {1000, 955}, {-1000, 956}, {-1000, 955}, {1000, 952}, {1000, 951},
        {-1000, 952},  {-1000, 951}, {1000, 948}, {1000, 947}, {-1000, 948}, {-1000, 947}, {1000, 944}, {1000, 943},
        {-1000, 944},  {-1000, 943}, {1000, 940}, {1000, 939}, {-1000, 940}, {-1000, 939}, {1000, 936}, {1000, 935},
        {-1000, 936},  {-1000, 935}, {1000, 932}, {1000, 931}, {-1000, 932}, {-1000, 931}, {1000, 928}, {1000, 927},
        {-1000, 928},  {-1000, 927}, {1000, 924}, {1000, 923}, {-1000, 924}, {-1000, 923}, {1000, 920}, {1000, 919},
        {-1000, 920},  {-1000, 919}, {1000, 916}, {1000, 915}, {-1000, 916}, {-1000, 915}, {1000, 912}, {1000, 911},
        {-1000, 912},  {-1000, 911}, {1000, 908}, {1000, 907}, {-1000, 908}, {-1000, 907}, {1000, 904}, {1000, 903},
        {-1000, 904},  {-1000, 903}, {1000, 900}, {1000, 899}, {-1000, 900}, {-1000, 899}, {1000, 896}, {1000, 895},
        {-1000, 896},  {-1000, 895}, {1000, 892}, {1000, 891}, {-1000, 892}, {-1000, 891}, {1000, 888}, {1000, 887},
        {-1000, 888},  {-1000, 887}, {1000, 884}, {1000, 883}, {-1000, 884}, {-1000, 883}, {1000, 880}, {1000, 879},
        {-1000, 880},  {-1000, 879}, {1000, 876}, {1000, 875}, {-1000, 876}, {-1000, 875}, {1000, 872}, {1000, 871},
        {-1000, 872},  {-1000, 871}, {1000, 868}, {1000, 867}, {-1000, 868}, {-1000, 867}, {1000, 864}, {1000, 863},
        {-1000, 864},  {-1000, 863}, {1000, 860}, {1000, 859}, {-1000, 860}, {-1000, 859}, {1000, 856}, {1000, 855},
        {-1000, 856},  {-1000, 855}, {1000, 852}, {1000, 851}, {-1000, 852}, {-1000, 851}, {1000, 848}, {1000, 847},
        {-1000, 848},  {-1000, 847}, {1000, 844}, {1000, 843}, {-1000, 844}, {-1000, 843}, {1000, 840}, {1000, 839},
        {-1000, 840},  {-1000, 839}, {1000, 836}, {1000, 835}, {-1000, 836}, {-1000, 835}, {1000, 832}, {1000, 831},
        {-1000, 832},  {-1000, 831}, {1000, 828}, {1000, 827}, {-1000, 828}, {-1000, 827}, {1000, 824}, {1000, 823},
        {-1000, 824},  {-1000, 823}, {1000, 820}, {1000, 819}, {-1000, 820}, {-1000, 819}, {1000, 816}, {1000, 815},
        {-1000, 816},  {-1000, 815}, {1000, 812}, {1000, 811}, {-1000, 812}, {-1000, 811}, {1000, 808}, {1000, 807},
        {-1000, 808},  {-1000, 807}, {1000, 804}, {1000, 803}, {-1000, 804}, {-1000, 803}, {1000, 800}, {1000, 799},
        {-1000, 800},  {-1000, 799}, {1000, 796}, {1000, 795}, {-1000, 796}, {-1000, 795}, {1000, 792}, {1000, 791},
        {-1000, 792},  {-1000, 791}, {1000, 788}, {1000, 787}, {-1000, 788}, {-1000, 787}, {1000, 784}, {1000, 783},
        {-1000, 784},  {-1000, 783}, {1000, 780}, {1000, 779}, {-1000, 780}, {-1000, 779}, {1000, 776}, {1000, 775},
        {-1000, 776},  {-1000, 775}, {1000, 772}, {1000, 771}, {-1000, 772}, {-1000, 771}, {1000, 768}, {1000, 767},
        {-1000, 768},  {-1000, 767}, {1000, 764}, {1000, 763}, {-1000, 764}, {-1000, 763}, {1000, 760}, {1000, 759},
        {-1000, 760},  {-1000, 759}, {1000, 756}, {1000, 755}, {-1000, 756}, {-1000, 755}, {1000, 752}, {1000, 751},
        {-1000, 752},  {-1000, 751}, {1000, 748}, {1000, 747}, {-1000, 748}, {-1000, 747}, {1000, 744}, {1000, 743},
        {-1000, 744},  {-1000, 743}, {1000, 740}, {1000, 739}, {-1000, 740}, {-1000, 739}, {1000, 736}, {1000, 735},
        {-1000, 736},  {-1000, 735}, {1000, 732}, {1000, 731}, {-1000, 732}, {-1000, 731}, {1000, 728}, {1000, 727},
        {-1000, 728},  {-1000, 727}, {1000, 724}, {1000, 723}, {-1000, 724}, {-1000, 723}, {1000, 720}, {1000, 719},
        {-1000, 720},  {-1000, 719}, {1000, 716}, {1000, 715}, {-1000, 716}, {-1000, 715}, {1000, 712}, {1000, 711},
        {-1000, 712},  {-1000, 711}, {1000, 708}, {1000, 707}, {-1000, 708}, {-1000, 707}, {1000, 704}, {1000, 703},
        {-1000, 704},  {-1000, 703}, {1000, 700}, {1000, 699}, {-1000, 700}, {-1000, 699}, {1000, 696}, {1000, 695},
        {-1000, 696},  {-1000, 695}, {1000, 692}, {1000, 691}, {-1000, 692}, {-1000, 691}, {1000, 688}, {1000, 687},
        {-1000, 688},  {-1000, 687}, {1000, 684}, {1000, 683}, {-1000, 684}, {-1000, 683}, {1000, 680}, {1000, 679},
        {-1000, 680},  {-1000, 679}, {1000, 676}, {1000, 675}, {-1000, 676}, {-1000, 675}, {1000, 672}, {1000, 671},
        {-1000, 672},  {-1000, 671}, {1000, 668}, {1000, 667}, {-1000, 668}, {-1000, 667}, {1000, 664}, {1000, 663},
        {-1000, 664},  {-1000, 663}, {1000, 660}, {1000, 659}, {-1000, 660}, {-1000, 659}, {1000, 656}, {1000, 655},
        {-1000, 656},  {-1000, 655}, {1000, 652}, {1000, 651}, {-1000, 652}, {-1000, 651}, {1000, 648}, {1000, 647},
        {-1000, 648},  {-1000, 647}, {1000, 644}, {1000, 643}, {-1000, 644}, {-1000, 643}, {1000, 640}, {1000, 639},
        {-1000, 640},  {-1000, 639}, {1000, 636}, {1000, 635}, {-1000, 636}, {-1000, 635}, {1000, 632}, {1000, 631},
        {-1000, 632},  {-1000, 631}, {1000, 628}, {1000, 627}, {-1000, 628}, {-1000, 627}, {1000, 624}, {1000, 623},
        {-1000, 624},  {-1000, 623}, {1000, 620}, {1000, 619}, {-1000, 620}, {-1000, 619}, {1000, 616}, {1000, 615},
        {-1000, 616},  {-1000, 615}, {1000, 612}, {1000, 611}, {-1000, 612}, {-1000, 611}, {1000, 608}, {1000, 607},
        {-1000, 608},  {-1000, 607}, {1000, 604}, {1000, 603}, {-1000, 604}, {-1000, 603}, {1000, 600}, {1000, 599},
        {-1000, 600},  {-1000, 599}, {1000, 596}, {1000, 595}, {-1000, 596}, {-1000, 595}, {1000, 592}, {1000, 591},
        {-1000, 592},  {-1000, 591}, {1000, 588}, {1000, 587}, {-1000, 588}, {-1000, 587}, {1000, 584}, {1000, 583},
        {-1000, 584},  {-1000, 583}, {1000, 580}, {1000, 579}, {-1000, 580}, {-1000, 579}, {1000, 576}, {1000, 575},
        {-1000, 576},  {-1000, 575}, {1000, 572}, {1000, 571}, {-1000, 572}, {-1000, 571}, {1000, 568}, {1000, 567},
        {-1000, 568},  {-1000, 567}, {1000, 564}, {1000, 563}, {-1000, 564}, {-1000, 563}, {1000, 560}, {1000, 559},
        {-1000, 560},  {-1000, 559}, {1000, 556}, {1000, 555}, {-1000, 556}, {-1000, 555}, {1000, 552}, {1000, 551},
        {-1000, 552},  {-1000, 551}, {1000, 548}, {1000, 547}, {-1000, 548}, {-1000, 547}, {1000, 544}, {1000, 543},
        {-1000, 544},  {-1000, 543}, {1000, 540}, {1000, 539}, {-1000, 540}, {-1000, 539}, {1000, 536}, {1000, 535},
        {-1000, 536},  {-1000, 535}, {1000, 532}, {1000, 531}, {-1000, 532}, {-1000, 531}, {1000, 528}, {1000, 527},
        {-1000, 528},  {-1000, 527}, {1000, 524}, {1000, 523}, {-1000, 524}, {-1000, 523}, {1000, 520}, {1000, 519},
        {-1000, 520},  {-1000, 519}, {1000, 516}, {1000, 515}, {-1000, 516}, {-1000, 515}, {1000, 512}, {1000, 511},
        {-1000, 512},  {-1000, 511}, {1000, 508}, {1000, 507}, {-1000, 508}, {-1000, 507}, {1000, 504}, {1000, 503},
        {-1000, 504},  {-1000, 503}, {1000, 500}, {1000, 499}};
    const auto a_out = Solution().countTrapezoids(points);
    assert(a_out == 968765625);

    const auto end_t = std::chrono::high_resolution_clock::now();
    const auto total_t = std::chrono::duration_cast<std::chrono::milliseconds>(end_t - start_t).count();
    std::cerr << total_t << " ms"sv << std::endl;
  }
  std::cerr << "TestSolution OK"sv << std::endl;
}

int main() {
#ifndef NDEBUG
  TestSolution();
#endif
  return 0;
}
